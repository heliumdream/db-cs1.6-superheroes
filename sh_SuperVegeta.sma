//VEGETA! - The Prins of all saiyans.
/* thanks too vittu and buttface for the codes off goten. been a big help !!

CVARS - copy and paste to shconfig.cfg

//Vegeta
vegeta_level 10
vegeta_health 550			//Default HealthPoints 550
vegeta_armor 250			//Default ArmorPoints 250
vegeta_cooldown 25		//Delay between a shot
vegeta_maxdamage 150	                //Max Damage from blast
vegeta_radius 100			//Radius of blast
vegeta_blast_decals 1 		//Show the burn decals on the walls

*//*

*Version 1.0 Made the hero, added sprites of HL mod : Earth's Special Forces (GOOD GAME)
*Version 1.1 Added the sound 
*Version 1.2 Added healpoints
*/


// 1 = send another plugins information about cooldown, 0 = don't send
#define SEND_COOLDOWN 1

#include <amxmod>
#include <superheromod>

new gHeroName[]="Super Vegeta"
new bool:gHasVegetaPower[SH_MAXSLOTS+1]
new bool:gBlockKeyup[SH_MAXSLOTS+1]
new gLastWeapon[SH_MAXSLOTS+1]
new Beam, Explosion, Smoke
static const burn_decal[3] = {28, 29, 30}
static const burn_decal_big[3] = {46, 47, 48}
new gPlayerMaxHealth[SH_MAXSLOTS+1]
new gHealPoints

#if SEND_COOLDOWN
new Float:SVegetaUsedTime[SH_MAXSLOTS+1]
#endif
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Vegeta", "1.2", "Mega")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("vegeta_level", "10")
	register_cvar("vegeta_health", "550")
	register_cvar("vegeta_armor", "250")
	register_cvar("vegeta_cooldown", "25")
	register_cvar("vegeta_maxdamage", "150")
	register_cvar("vegeta_radius", "100")
	register_cvar("vegeta_blast_decals", "1")
	register_cvar("vegeta_healpoints", "1" )


	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(gHeroName, "GalitGun", "On +keydown Fire Vegeta's GalitGun and regen 1hp per sec", true, "vegeta_level")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// INIT
	register_srvcmd("vegeta_init", "vegeta_init")
	shRegHeroInit(gHeroName, "vegeta_init")

	// HEAL LOOP
	set_task(1.0,"vegeta_loop",0,"",0,"b" )

	//KEY DOWN
	register_srvcmd("vegeta_kd", "vegeta_kd")
	shRegKeyDown(gHeroName, "vegeta_kd")

	//KEY UP
	register_srvcmd("vegeta_ku", "vegeta_ku")
	shRegKeyUp(gHeroName, "vegeta_ku")

	register_event("ResetHUD", "newSpawn", "b")

	// Let Server know about Goten's Variables
	shSetMaxHealth(gHeroName, "vegeta_health" )
	shSetMaxArmor(gHeroName, "vegeta_armor" )
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	Beam = precache_model("sprites/shmod/galitgun_trial.spr")
	Explosion =precache_model("sprites/shmod/galitgun_explo.spr")
	Smoke = precache_model("sprites/wall_puff4.spr")
}
//----------------------------------------------------------------------------------------------
#if SEND_COOLDOWN
public sendSVegetaCooldown(id)
{
	new cooldown
	if (gPlayerInCooldown[id])
		cooldown = floatround( get_cvar_float("vegeta_cooldown") - get_gametime() + SVegetaUsedTime[id] + 0.4 )
	else
		cooldown = -1
	return cooldown
}
#endif
//----------------------------------------------------------------------------------------------
public vegeta_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has the hero
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)

	gPlayerMaxHealth[id] = 100
	gHasVegetaPower[id] = (hasPowers!=0)

	//This gets run if they had the power but don't anymore
	if ( !hasPowers && gHasVegetaPower[id] && is_user_alive(id) ) {
		shRemHealthPower(id)
		shRemArmorPower(id)
	}

	//Sets this variable to the current status
	gHasVegetaPower[id] = (hasPowers != 0)
}
//----------------------------------------------------------------------------------------------
public newSpawn(id)
{
	gPlayerUltimateUsed[id] = false
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYDOWN
public vegeta_kd()
{
	if ( !hasRoundStarted() ) return

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if ( !is_user_alive(id) || !gHasVegetaPower[id] ) return

	if ( gPlayerUltimateUsed[id] ) {
		playSoundDenySelect(id)
		gBlockKeyup[id] = true
		return
	}

	gBlockKeyup[id] = false

	// Remember this weapon...
	new clip, ammo, weaponID = get_user_weapon(id, clip, ammo)
	gLastWeapon[id] = weaponID

	// switch to knife
	engclient_cmd(id, "weapon_knife")

	fire_wave(id)

	if (get_cvar_float("vegeta_cooldown") > 0.0) 
	{
		ultimateTimer(id, get_cvar_float("vegeta_cooldown"))

		#if SEND_COOLDOWN
		SVegetaUsedTime[id] = get_gametime()
		#endif
	}
	
}
//----------------------------------------------------------------------------------------------
public vegeta_ku()
{
	if ( !hasRoundStarted() ) return

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if ( !is_user_alive(id) || !gHasVegetaPower[id] || gBlockKeyup[id] ) return

	// Switch back to previous weapon...
	// Use keyup since if called too fast CurWeapon functions may be bypassed
	if (gLastWeapon[id] != CSW_KNIFE) shSwitchWeaponID(id, gLastWeapon[id])
}
//----------------------------------------------------------------------------------------------
public fire_wave(id)
{
	new aimvec[3]
	new FFOn = get_cvar_num("mp_friendlyfire")

	new Float:dRatio, damage, distanceBetween
	new damradius = get_cvar_num("vegeta_radius")
	new maxdamage = get_cvar_num("vegeta_maxdamage")

	if( !is_user_alive(id) ) return

	get_user_origin(id, aimvec, 3)
	beam_effects(id, aimvec, damradius)

	for(new vic = 1; vic <= SH_MAXSLOTS; vic++)
	{
		if ( is_user_alive(vic) && ( get_user_team(id) != get_user_team(vic) || FFOn || vic == id ) ) {

			new origin[3]
			get_user_origin(vic, origin)
			distanceBetween = get_distance(aimvec, origin)

			if ( distanceBetween < damradius ) {

				dRatio = float(distanceBetween) / float(damradius)
				damage = maxdamage - floatround(maxdamage * dRatio)

				// Lessen damage taken by self
				if (vic == id) damage = floatround(damage / 2.0)

				shExtraDamage(vic, id, damage, "GalitGun")
			}
		}
	}
}
//----------------------------------------------------------------------------------------------
public beam_effects(id, aimvec[3], damradius)
{
	new decal_id, beamWidth

	//Change sprite size according to blast radius
	new blastSize = floatround(damradius / 12.0)

	//Change burn decal and beam width size according to blast size
	if (blastSize <= 18) {
		decal_id = burn_decal[random_num(0, 2)]
		beamWidth = 50
	}
	else {
		decal_id = burn_decal_big[random_num(0, 2)]
		beamWidth = 75
	}

	//Beam
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(1)			//TE_BEAMENTPOINTS
	write_short(id)		//ent
	write_coord(aimvec[0])	//position
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(Beam)	// sprite index
	write_byte(0)		// start frame
	write_byte(35)		// framerate
	write_byte(4)		// life
	write_byte(beamWidth)	// width
	write_byte(0)		// noise
	write_byte(255)	// red (rgb color)
	write_byte(255)	// green (rgb color)
	write_byte(255)	// blue (rgb color)
	write_byte(255)	// brightness
	write_byte(20)		// speed
	message_end()

	//Glow Sprite (explosion)
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(23)			//TE_GLOWSPRITE
	write_coord(aimvec[0])	//position
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(Explosion)	// model
	write_byte(001)		// life 0.x sec (01 min limit?)
	write_byte(blastSize)	// size
	write_byte(255)		// brightness
	message_end()

	//Explosion (smoke, sound/effects)
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(3)			//TE_EXPLOSION
	write_coord(aimvec[0])	//pos
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(Smoke)		// model
	write_byte(blastSize+5)	// scale in 0.1's
	write_byte(20)			// framerate
	write_byte(10)			// flags
	message_end()

	//Burn Decals
	if(get_cvar_num("vegeta_blast_decals") == 1) {
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(109)		//TE_GUNSHOTDECAL
		write_coord(aimvec[0])	//pos
		write_coord(aimvec[1])
		write_coord(aimvec[2])
		write_short(0)			//?
		write_byte(decal_id)	//decal
		message_end()
	}
}
//----------------------------------------------------------------------------------------------
public vegeta_loop()
{
	if (!shModActive()) return
	for ( new id = 1; id <= SH_MAXSLOTS; id++ ) {
		if (  gHasVegetaPower[id] && is_user_alive(id)  )   {
			// Let the server add the hps back since the # of max hps is controlled by it
			// I.E. Superman has more than 100 hps etc.
			shAddHPs(id, gHealPoints, gPlayerMaxHealth[id] )
		}
	}
}
//----------------------------------------------------------------------------------------------
public vegeta_maxhealth()
{
	new id[6]
	new health[9]

	read_argv(1,id,5)
	read_argv(2,health,8)

	gPlayerMaxHealth[str_to_num(id)] = str_to_num(health)
}
//----------------------------------------------------------------------------------------------