/*
**					============
**					|Danimoth X|
**					============
**
**
**	Change Log:
**	------------------
**
**	v 2.2 - July 18, 2010
**		- stasis field now appears instantly
**		- other minor changes
**	v 2.1 - October 20, 2009
**		- reduced prism size and made it fit around the victim
**		- modified loop function
**		- slight modification to the prism code and color
**		- minor fixes
**	v 2.0 - October 13, 2009
**		- updated to SH 1.20 format
**		- use pcvars instead of cvars
**		- cleaned up code
**
**		  
*/


// 1 = send another plugins information about cooldown, 0 = don't send
#define SEND_COOLDOWN 1

#include <superheromod>

#define RED 50
#define GREEN 100
#define BLUE 255

// VARIABLES
new gHeroID
new const gHeroName[] = "Danimoth X"
new bool:gHasDanimoth[SH_MAXSLOTS+1]
new bool:is_frozen[SH_MAXSLOTS+1]
new gIsInvisible[SH_MAXSLOTS+1]
new gLastWeapon[SH_MAXSLOTS+1]
new gSpriteBeam
new pCvarCooldown, pCvarFreezeRadius, pCvarFreezeTime
new pCvarPrismLife, pCvarCloakRadius, pCvarCloakPercent

#if SEND_COOLDOWN
new Float:DanimothUsedTime[SH_MAXSLOTS+1]
#endif
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	//PLUGIN INFO
	register_plugin("SUPERHERO Danimoth X","2.2","1sh0t2killz")
	
	//DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel 		= register_cvar("danimoth_level", 		"10")
	pCvarCooldown 		= register_cvar("danimoth_cooldown", 		"45" )
	pCvarFreezeRadius 	= register_cvar("danimoth_freezeradius", 	"750" ) 
	pCvarFreezeTime 	= register_cvar("danimoth_freezetime", 		"10.0" )
	pCvarPrismLife		= register_cvar("danimoth_prismlife", 		"100" )
	pCvarCloakRadius 	= register_cvar("danimoth_radius", 		"750" )
	pCvarCloakPercent 	= register_cvar("danimoth_alpha", 		"20")

	//FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	sh_set_hero_info(gHeroID, "Protoss Arbiter", "Cloak allies near you use your +power to freeze foes in place!")
	sh_set_hero_bind(gHeroID)
	
	//PRETHINK
	register_forward(FM_PlayerPreThink, "Player_PreThink")
	
	//LOOP
	set_task(1.0, "Danimoth_loop", _, _, _, "b")
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	gSpriteBeam = precache_model("sprites/laserbeam.spr")
	precache_sound("shmod/danimoth_cloak.wav")
	precache_sound("shmod/danimoth_stasis.wav")
}
//----------------------------------------------------------------------------------------------
#if SEND_COOLDOWN
public sendDanimothCooldown(id)
{
	new cooldown
	if (gPlayerInCooldown[id])
		cooldown = floatround( get_pcvar_num(pCvarCooldown) - get_gametime() + DanimothUsedTime[id] + 0.4 )
	else
		cooldown = -1
	return cooldown
}
#endif
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if ( gHeroID != heroID ) return

	switch(mode) {
		case SH_HERO_ADD: {
			gHasDanimoth[id] = true
			gPlayerInCooldown[id] = false
			sh_chat_message(id, gHeroID, "We feed your presence..")
		}
		case SH_HERO_DROP: {
			gHasDanimoth[id] = false
		}
	}

	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}

//----------------------------------------------------------------------------------------------
public sh_round_end()
{
	for ( new id = 1; id <= SH_MAXSLOTS; id++ ) {
		if ( is_frozen[id] ) {
			is_frozen[id] = false
			set_user_hitzones(0,id,255)
		}
	}
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	gPlayerInCooldown[id] = false
	return PLUGIN_HANDLED
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	gHasDanimoth[id] = false
	is_frozen[id] = false
}
//----------------------------------------------------------------------------------------------
public sh_hero_key(id, heroID, key)
{
	if ( gHeroID != heroID ) return

	if ( key == SH_KEYDOWN ) 
	{
		if ( !is_user_alive(id) || !gHasDanimoth[id] ) return
	
		if ( gPlayerInCooldown[id] ) {
			playSoundDenySelect(id)
			sh_chat_message(id, gHeroID, "Not Enough Energy..")
			return
		}
	
		new players[SH_MAXSLOTS], playerCount, player
		new fromOrigin[3], toOrigin[3], distanceBetween
		new DanimothRadius = get_pcvar_num(pCvarFreezeRadius)
		new CsTeams:idTeam = cs_get_user_team(id)
		new count = 0
		get_user_origin(id, fromOrigin)
	
		get_players(players, playerCount, "ah")
	
		for ( new i = 0; i < playerCount; i++ ) {
			player = players[i]
	
			if ( idTeam != cs_get_user_team(player) ) {
				new Float:StunTime = get_pcvar_float(pCvarFreezeTime)
				
				get_user_origin(player, toOrigin)
				distanceBetween = get_distance(fromOrigin, toOrigin)
	
				if ( (distanceBetween < DanimothRadius) ) {
					is_frozen[player] = true
					gLastWeapon[player] = get_user_weapon(player)
					sh_set_stun(player, StunTime, 1.0)
					set_pev(player, pev_flags, pev(player, pev_flags) | FL_FROZEN)
					set_user_hitzones(0,player ,0)
					set_user_godmode(player, 1)
					DanimothStasisField(player)
					emit_sound(id, CHAN_STATIC, "shmod/danimoth_stasis.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
					emit_sound(player, CHAN_STATIC, "shmod/danimoth_stasis.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
					++count;
				}
			}
		}
		new Float:cooldown = get_pcvar_float(pCvarCooldown)
		if ( cooldown > 0.0 ) sh_set_cooldown(id, cooldown)

		#if SEND_COOLDOWN
		DanimothUsedTime[id] = get_gametime()
		#endif
	}
}
//----------------------------------------------------------------------------------------------
public Danimoth_Unfreeze(target)
{
	is_frozen[target] = false
	set_pev(target, pev_flags, pev(target, pev_flags) & ~FL_FROZEN)
	set_user_hitzones(0,target,255)
	set_user_godmode(target, 0)
	client_cmd(target,"-strafe")
	
	if ( gLastWeapon[target] != CSW_KNIFE ) sh_switch_weapon(target, gLastWeapon[target])
}
//----------------------------------------------------------------------------------------------
public Player_PreThink(id)
{
	if ( ! is_user_alive(id) )
	is_frozen[id] = false

	if ( is_frozen[id] ){
		client_cmd(id,"+strafe")
		entity_set_int(id,EV_INT_button,0)
		entity_set_vector(id,EV_VEC_velocity,Float:{0.0,0.0,4.0})
		engclient_cmd(id, "weapon_knife")
	}
}
//----------------------------------------------------------------------------------------------
public Danimoth_loop()
{
	if (!shModActive()) return
	for ( new id = 1; id <= SH_MAXSLOTS; id++ ) {
		if ( gHasDanimoth[id] && is_user_alive(id) ){	
			//Cloak Task
			set_task(0.1,"DanimothCloak",id)
			set_task(0.1,"DanimothDeCloak",id)
		}
	}
}
//----------------------------------------------------------------------------------------------
public DanimothCloak(id)
{
	new distanceBetween
	new origin[3]
	get_user_origin(id,origin)
	
	for(new team = 1; team <= SH_MAXSLOTS; team++){
		if( is_user_alive(team) && ( get_user_team(id) == get_user_team(team)) && gIsInvisible[team] == 0 ){
			new origin1[3]
			get_user_origin(team,origin1)
		
			distanceBetween = get_distance(origin, origin1 )
			if( distanceBetween < get_pcvar_num(pCvarCloakRadius) ){
				emit_sound(id, CHAN_STATIC, "shmod/danimoth_cloak.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
				emit_sound(team, CHAN_STATIC, "shmod/danimoth_cloak.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
				DanimothInvisibility(team, get_pcvar_num(pCvarCloakPercent))
				gIsInvisible[team] = 1
			}
		}
	}     
}
//----------------------------------------------------------------------------------------------
public DanimothDeCloak(id)
{
	new distanceBetween
	new origin[3]
	get_user_origin(id,origin)
	
	for(new team = 1; team <= SH_MAXSLOTS; team++){
		if( is_user_alive(team) && ( get_user_team(id) == get_user_team(team)) && gIsInvisible[team] == 1 ){
			new origin1[3]
			get_user_origin(team,origin1)
			
			distanceBetween = get_distance(origin, origin1 )
			if( distanceBetween > get_pcvar_num(pCvarCloakRadius) ){
				shUnglow(team)
				client_print(team,print_center,"[SH]Danimoth: You are De-cloaked")
				gIsInvisible[team] = 0
			}
		}
	}      
}
//----------------------------------------------------------------------------------------------
public DanimothInvisibility(team, alpha)
{
	client_print(team,print_center,"[SH]Danimoth: You are near Danimoth and now invisible")

	if (alpha < 125) {
		set_user_rendering(team,kRenderFxGlowShell,8,8,8,kRenderTransAlpha,alpha)
	}
	else {
		set_user_rendering(team,kRenderFxNone,0,0,0,kRenderTransAlpha,alpha)
	}
}
//----------------------------------------------------------------------------------------------
public DanimothStasisField(target)
{
	//=================
	//Draw Stasis Field
	//=================
	
	new prisimlife = get_pcvar_num(pCvarPrismLife)
	new origin[3]
	get_user_origin(target, origin, 1)
	set_task(get_pcvar_float(pCvarFreezeTime), "Danimoth_Unfreeze", target)
	
	
	//==============
	//Top Base Start
	//==============
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )     		//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+60)    //X
	write_coord(origin[1])	//Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]+60)    //Z - FROM
	write_coord(origin[2]+30)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) 		// framestart
	write_byte( 5 ) 		// framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) 		// width
	write_byte( 0 )		// noise
	write_byte( RED ) 		// r, g, b
	write_byte( GREEN ) 		// r, g, b
	write_byte( BLUE ) 		// r, g, b
	write_byte( 200 ) 		// brightness
	write_byte( 200 ) 		// speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )     		//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]+60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]+40)    //Z - FROM
	write_coord(origin[2]+30)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) 		// framestart
	write_byte( 5 ) 		// framerate
	write_byte( prisimlife ) 		// life
	write_byte( 20 ) 		// width
	write_byte( 0 ) 		// noise
	write_byte( RED ) 		// r, g, b
	write_byte( GREEN ) 		// r, g, b
	write_byte( BLUE ) 		// r, g, b
	write_byte( 200 ) 		// brightness
	write_byte( 200 ) 		// speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )     		//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]+40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]-40)    //Z - FROM
	write_coord(origin[2]+30)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) 		// framestart
	write_byte( 5 ) 		// framerate
	write_byte( prisimlife ) 		// life
	write_byte( 20 ) 		// width
	write_byte( 0 ) 		// noise
	write_byte( RED ) 		// r, g, b
	write_byte( GREEN ) 		// r, g, b
	write_byte( BLUE ) 		// r, g, b
	write_byte( 200 ) 		// brightness
	write_byte( 200 ) 		// speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]-40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]-60)    //Z - FROM
	write_coord(origin[2]+30)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) 		// framestart
	write_byte( 5 ) 		// framerate
	write_byte( prisimlife )		// life
	write_byte( 20 ) 		// width
	write_byte( 0 ) 		// noise
	write_byte( RED ) 		// r, g, b
	write_byte( GREEN ) 		// r, g, b
	write_byte( BLUE ) 		// r, g, b
	write_byte( 200 ) 		// brightness
	write_byte( 200 ) 		// speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]-60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+60)    //X
	write_coord(origin[1])     	//Z - FROM
	write_coord(origin[2]+30)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) 		// framestart
	write_byte( 5 ) 		// framerate
	write_byte( prisimlife ) 		// life
	write_byte( 20 ) 		// width
	write_byte( 0 ) 		// noise
	write_byte( RED ) 		// r, g, b
	write_byte( GREEN ) 		// r, g, b
	write_byte( BLUE ) 		// r, g, b
	write_byte( 200 ) 		// brightness
	write_byte( 200 ) 		// speed
	message_end()
	
	//==============
	//Top Base End
	//==============
	
	//=================
	//Bottom Base Start
	//=================
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]-30)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]-50)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]-50)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0]-50)    //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1])	//Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]+50)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]+50)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]+30)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]+30)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]-30)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//=================
	//Bottom Base End
	//=================
	
	//==================
	//Body Connect Start
	//==================
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+60)    //X
	write_coord(origin[1])	//Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]-30)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+60)    //X
	write_coord(origin[1])	//Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]+30)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]+60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]+30)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]+60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]+50)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]+40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]+50)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]+40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-50)    //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]-40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-50)    //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]-40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]-50)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]-60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]-50)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]-60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]-30)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//==================
	//Body Connect End
	//==================
	
	//=============
	//Top Lid Start
	//=============
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+60)    //X
	write_coord(origin[1])	//Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]+52)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]+60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]+52)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]+40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]+52)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]-40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]+52)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]-60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]+52)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//=============
	//Top Lid End
	//=============
	
	//================
	//Bottom Lid Start
	//================
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]+30)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-72)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]-30)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-72)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]-50)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-72)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]+50)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-72)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1])	//Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-72)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//================
	//Bottom Lid End
	//================

}
//----------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
