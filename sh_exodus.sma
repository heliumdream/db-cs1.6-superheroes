// EXODUS! from X-men. A mutant who possesses vast psionic powers.

/* CVARS - copy and paste to shconfig.cfg

//Exodus
exodus_level 9
exodus_cooldown 15		//# of seconds before next available use after a grabbed user is released (Default 15)
exodus_grabtime 6		//# of seconds Exodus can grab a player for, -1 is unlimited (Default 6)
exodus_grabforce 8.0	//Grab force or speed you can move a grabbed user, 1.5 min - 16.0 max (Default 8.0)
exodus_toggle 1		//0-hold keydown to use, 1-toggles the grab (Default 1)

*/


// 1 = send another plugins information about cooldown, 0 = don't send
#define SEND_COOLDOWN 1

/*
* v1.2 - vittu - 1/17/06
*      - Re-coded and cleaned up.
*      - Added toggle option.
*      - Removed ability to grab teammates.
*      - Changed color and added effect to better match hero.
*      - Changed so cooldown only sets if someone is grabbed, sets after they are released.
*      - Converted for AMXMODX format only.
*
*   Based on Jedi Force Grab plugin by SpaceDude.
*/

#include <amxmodx>
#include <engine>
#include <cstrike>
#include <superheromod>

// GLOBAL VARIABLES
new g_heroName[]="Exodus"
new bool:g_hasExodus[SH_MAXSLOTS+1]
new bool:g_inSearch[SH_MAXSLOTS+1]
new g_grabbedID[SH_MAXSLOTS+1]
new g_grabTimer[SH_MAXSLOTS+1]
new g_grabLength[SH_MAXSLOTS+1]
new Float:g_velocityMult, g_spriteLightning

#if SEND_COOLDOWN
new Float:ExodusUsedTime[SH_MAXSLOTS+1]
#endif
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Exodus", "1.2", "Freecode / RabidEskimo")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("exodus_level", "9")
	register_cvar("exodus_cooldown", "15")
	register_cvar("exodus_grabtime", "6")
	register_cvar("exodus_grabforce", "8.0")
	register_cvar("exodus_toggle", "1")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(g_heroName, "Telekinesis", "Telekinetically pick up and drag player in the air with +power key.", true, "exodus_level")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// INIT
	register_srvcmd("exodus_init", "exodus_init")
	shRegHeroInit(g_heroName, "exodus_init")

	// KEY DOWN
	register_srvcmd("exodus_kd", "exodus_kd")
	shRegKeyDown(g_heroName, "exodus_kd")

	// KEY UP
	register_srvcmd("exodus_ku", "exodus_ku")
	shRegKeyUp(g_heroName, "exodus_ku")

	// NEW SPAWN
	register_event("ResetHUD", "newSpawn", "b")

	// DEATH
	register_event("DeathMsg", "exodus_death", "a")
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	g_spriteLightning = precache_model("sprites/lgtning.spr")
}
//----------------------------------------------------------------------------------------------
#if SEND_COOLDOWN
public sendExodusCooldown(id)
{
	new cooldown
	if (gPlayerInCooldown[id])
		cooldown = floatround( get_cvar_float("exodus_cooldown") - get_gametime() + ExodusUsedTime[id] + 0.4 )
	else
		cooldown = -1
	return cooldown
}
#endif
//----------------------------------------------------------------------------------------------
public exodus_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has the hero
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)

	//Clear out any stale tasks
	remove_task(id)

	if ( !hasPowers && g_hasExodus[id] && is_user_connected(id) ) {
		if ( g_inSearch[id] ) release(id)
	}

	g_hasExodus[id] = (hasPowers != 0)
}
//----------------------------------------------------------------------------------------------
public newSpawn(id)
{
	if ( g_inSearch[id] ) release(id)

	gPlayerUltimateUsed[id] = false

	g_grabTimer[id] = -1
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYDOWN
public exodus_kd()
{
	if ( !hasRoundStarted() ) return

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if ( !is_user_alive(id) || !g_hasExodus[id] ) return

	// If in toggle mode change this to a keyup event
	if ( get_cvar_num("exodus_toggle") && g_inSearch[id] ) {
		if ( !g_grabbedID[id] ) client_print(id, print_center, "Exodus - Stopped Searching")
		release(id)
		return
	}

	if ( gPlayerUltimateUsed[id] || g_grabTimer[id] >= 0 ) {
		playSoundDenySelect(id)
		return
	}

	g_velocityMult = get_cvar_float("exodus_grabforce")

	// Check to see if they set grabforce too high or too low, if they did reset it and tell them
	if ( g_velocityMult > 16.0 ) {
		debugMessage("[SH](Exodus) exodus_grabforce cvar must not be set higher then 16.0, defaulting to 16.0", 0, 0)
		g_velocityMult = 16.0
		set_cvar_float("exodus_grabforce", g_velocityMult)
	}
	else if ( g_velocityMult < 1.5 ) {
		debugMessage("[SH](Exodus) exodus_grabforce cvar must not be set lower then 1.5, defaulting to 1.5", 0, 0)
		g_velocityMult = 1.5
		set_cvar_float("exodus_grabforce", g_velocityMult)
	}

	g_inSearch[id] = true

	set_task(0.1, "grabtask", id, "", 0, "b")

	// Quick check before grabtask starts
	new targetid, body
	get_user_aiming(id, targetid, body)

	if ( is_user_alive(targetid) && cs_get_user_team(id) != cs_get_user_team(targetid) ) {
		g_grabbedID[id] = targetid
		set_grabbed(id, targetid)
	}
	else {
		client_print(id, print_center, "Exodus - Searching for a Victim")
	}
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYUP
public exodus_ku()
{
	if ( !hasRoundStarted() ) return

	// Toggle mode - keyup doesn't do anything!
	if ( get_cvar_num("exodus_toggle") ) return

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if ( !is_user_alive(id) || !g_hasExodus[id] || !g_inSearch[id] ) return

	if ( !g_grabbedID[id] ) client_print(id, print_center, "Exodus - Stopped Searching")

	release(id)
}
//----------------------------------------------------------------------------------------------
public grabtask(id)
{
	if ( !g_grabbedID[id] ) {
		new targetid, body

		get_user_aiming(id, targetid, body)

		if ( is_user_alive(targetid) && cs_get_user_team(id) != cs_get_user_team(targetid) ) {
			set_grabbed(id, targetid)
		}
	}
	else {
		if ( !is_user_alive(g_grabbedID[id]) ) {
			release(id)
			return
		}

		if ( get_user_gravity(g_grabbedID[id]) != 0.00001 ) {
			set_user_gravity(g_grabbedID[id], 0.00001)
		}

		new viewOrigin[3], aimVec[3], vicOrigin[3], newVec[3], direction[3], Float:fl_Velocity[3], length

		get_user_origin(id, viewOrigin, 1)
		get_user_origin(id, aimVec, 3)
		get_user_origin(g_grabbedID[id], vicOrigin)

		direction[0] = aimVec[0]-viewOrigin[0]
		direction[1] = aimVec[1]-viewOrigin[1]
		direction[2] = aimVec[2]-viewOrigin[2]

		length = get_distance(aimVec, viewOrigin)
		if (!length) length = 1            // avoid division by 0

		newVec[0] = viewOrigin[0]+direction[0]*g_grabLength[id]/length
		newVec[1] = viewOrigin[1]+direction[1]*g_grabLength[id]/length
		newVec[2] = viewOrigin[2]+direction[2]*g_grabLength[id]/length

		fl_Velocity[0] = (newVec[0]-vicOrigin[0])*g_velocityMult
		fl_Velocity[1] = (newVec[1]-vicOrigin[1])*g_velocityMult
		fl_Velocity[2] = (newVec[2]-vicOrigin[2])*g_velocityMult

		entity_set_vector(g_grabbedID[id], EV_VEC_velocity, fl_Velocity)
	}
}
//----------------------------------------------------------------------------------------------
public set_grabbed(id, targetid)
{
	new vicName[32], idName[32]

	g_grabTimer[id] = get_cvar_num("exodus_grabtime")

	if ( g_grabTimer[id] > 0 ) exodus_timeloop(id)

	g_grabbedID[id] = targetid

	g_grabLength[id] = get_entity_distance(id, targetid) 

	set_user_gravity(targetid, 0.00001)

	lightning_effect(id, targetid)
	shGlow(targetid, 200, 187, 0)

	get_user_name(targetid, vicName, 31)
	get_user_name(id, idName, 31)

	set_hudmessage(255, 255, 0, -1.0, 0.30, 0, 1.0, 3.0, 0.0, 0.0, 6)
	show_hudmessage(targetid, "%s has telekinetically grabbed you", idName)
	show_hudmessage(id, "Telekinetically grabbed:  %s", vicName)
}
//----------------------------------------------------------------------------------------------
public exodus_timeloop(id)
{
	if ( !g_hasExodus[id] || !is_user_alive(id) ) return

	if ( g_grabTimer[id] > 0 && g_grabTimer[id] < 11 ) {
		new message[128]
		format(message, 127, "%d second%s left of Telekinetic Grab", g_grabTimer[id], g_grabTimer[id] == 1 ? "" : "s")
		set_hudmessage(255, 255, 0, -1.0, 0.32, 0, 1.0, 1.0, 0.0, 0.0, 4)
		show_hudmessage(id, message)
	}
	else if ( g_grabTimer[id] == 0 ) {
		release(id)
	}

	g_grabTimer[id]--

	if ( g_grabTimer[id] >= 0 ) set_task(1.0, "exodus_timeloop", id)
}
//----------------------------------------------------------------------------------------------
public release(id)
{
	if ( g_grabbedID[id] ) {
		if ( is_user_alive(id) ) {
			if (get_cvar_float("exodus_cooldown") > 0.0) ultimateTimer(id, get_cvar_float("exodus_cooldown"))
		}
		if ( is_user_connected(g_grabbedID[id]) ) {
			shSetGravityPower(g_grabbedID[id])
			set_user_rendering(g_grabbedID[id])
		}
		g_grabbedID[id] = 0
		g_grabTimer[id] = -1
	}	

	#if SEND_COOLDOWN
	ExodusUsedTime[id] = get_gametime()
	#endif	

	remove_task(id)

	g_inSearch[id] = false
}
//----------------------------------------------------------------------------------------------
public exodus_death()
{
	new id = read_data(2)

	if ( !g_hasExodus[id] || !g_inSearch[id] ) return

	release(id)
}
//----------------------------------------------------------------------------------------------
public client_disconnect(id)
{
	if ( !g_hasExodus[id] || !g_inSearch[id] ) return

	release(id)
}
//----------------------------------------------------------------------------------------------
public lightning_effect(id, targetid)
{
	// Lightning effect - Create a beam between two entities
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY )
	write_byte(8)			// TE_BEAMENTS
	write_short(id)		// start entity
	write_short(targetid)	// entity
	write_short(g_spriteLightning)	// model
	write_byte(0)		// starting frame
	write_byte(15)		// frame rate
	write_byte(6)		// life
	write_byte(80)		// line width
	write_byte(10)		// noise amplitude
	write_byte(255)	// r, g, b
	write_byte(238)	// r, g, b
	write_byte(0)		// r, g, b
	write_byte(35)		// brightness
	write_byte(0)		// scroll speed
	message_end()
}
//----------------------------------------------------------------------------------------------