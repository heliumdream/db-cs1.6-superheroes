//NEO RELOADED! From The Matrix Reloaded movie.

/* CVARS - copy and paste to shconfig.cfg

//Neo Reloaded
neor_level 9
neor_slowmotime 10		//Slow motion time in seconds
neor_cooldown 40		//Cooldown time in seconds
neor_dodge 40			//Chance out of 100 a bullet will be stopped
neor_radius 100			//Bullets stopped at this radius
neor_speed 100			//Speed of neo during slow motion
neor_bulletspeed 475		//Speed of neos bullet during slow motion
neor_nospeed 75			//Speed of non-neos during slow motion
neor_nobulletspeed 450		//Speed of non-neos bullet during slow motion

*  ----------------------------------------------------------------------------------------------
*  Changes made to version 1.4 - vittu
*  - Updated to use amxmodx 1.75 and up only. Converted to use fakemeta instead of engine.
*  - Further optimized some of the code, removed a minor bit of useless code.
*  - Changed start origin/orinetation of bullet creation based on PM's code and jtp's help.
*  ----------------------------------------------------------------------------------------------
*  Changes made to version 1.3 - JTP10181
*  - Rewrote most of the plugin, using same ideas and functions
*  - Fixed tons of bugs and weird code
*  - Removed a lot of useless code, and optimized the code that was left
*  ----------------------------------------------------------------------------------------------
*  Changes made to version 1.2
*  -included feature of gaining XP when killing an enemy in slow motion
*  -included feature of losing XP when killing an ally in slow motion
*  ----------------------------------------------------------------------------------------------
*  Changes made to version 1.1
*  -Fixed the bug where people keep switching weapons on a new round
*  -Fixed bullet models making some people freeze & stuck
*  -Fixed people getting stucked at end of slow motion
*  -Improved code to make for more efficient play (should not lag the server)
*  ----------------------------------------------------------------------------------------------
*  Credits:
*  -To Peckerhead for his continous support and help in testing my heroes on his server (80.202.144.102)
*  -To Scazzurs for his inspirational Matrix mod
*  ----------------------------------------------------------------------------------------------
*/


// 1 = send another plugins information about cooldown, 0 = don't send
#define SEND_COOLDOWN 1

#include <amxmodx>
#include <fakemeta>
#include <superheromod>

new HeroName[] = "Neo Reloaded"
new bool:HasNeor[SH_MAXSLOTS+1]
new bool:UsingNeor[SH_MAXSLOTS+1]
new LastWeap[SH_MAXSLOTS+1]
new LastClip[SH_MAXSLOTS+1]
new NeorTimer[SH_MAXSLOTS+1]
new bool:BulletTime
new bool:FirstSpawn = true
new SpriteTrail
new NumOfNeos
new NeorHudSync
new CvarSlowMoTime, CvarCooldown, CvarDodgePct, CvarRadius
new CvarNeoSpeed, CvarNeoBulletSpeed, CvarNonNeoSpeed, CvarNonNeoBulletSpeed
#define TASKID 6789524

#if SEND_COOLDOWN
new Float:NeoUsedTime[SH_MAXSLOTS+1]
#endif
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Neo Reloaded", "1.4", "JTP10181/[Pentium4].killa/gigazer")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("neor_level", "9")
	CvarSlowMoTime = register_cvar("neor_slowmotime", "10")
	CvarCooldown = register_cvar("neor_cooldown", "40")
	CvarDodgePct = register_cvar("neor_dodge", "40")
	CvarRadius = register_cvar("neor_radius", "100")
	CvarNeoSpeed = register_cvar("neor_speed", "100")
	CvarNeoBulletSpeed = register_cvar("neor_bulletspeed", "475")
	CvarNonNeoSpeed = register_cvar("neor_nospeed", "75")
	CvarNonNeoBulletSpeed = register_cvar("neor_nobulletspeed", "450")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(HeroName, "Bullet Time", "Slow Motion and Bullet Time, when using Neo you can stop bullets!", true, "neor_level")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// INIT
	register_srvcmd("neor_init", "neor_init")
	shRegHeroInit(HeroName, "neor_init")

	// KEY DOWN
	register_srvcmd("neor_kd", "neor_kd")
	shRegKeyDown(HeroName, "neor_kd")

	// EVENTS
	register_event("ResetHUD", "new_spawn", "b")
	register_event("CurWeapon", "cur_weapon", "be", "1=1")
	register_event("DeathMsg", "neor_death", "a")
	register_logevent("round_end", 2, "1=Round_End")
	register_logevent("round_end", 2, "1&Restart_Round_")

	// FORWARDS
	register_forward(FM_Touch, "neor_touch")

	NeorHudSync = CreateHudSyncObj() 
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	precache_model("models/shell.mdl")
	SpriteTrail = precache_model("sprites/zbeam4.spr")
	precache_sound("shmod/neor_btstart.wav")
	precache_sound("shmod/neor_btend.wav")
}
//----------------------------------------------------------------------------------------------
#if SEND_COOLDOWN
public sendNeoCooldown(id)
{
	new cooldown
	if (gPlayerInCooldown[id])
		cooldown = floatround( get_pcvar_num(CvarCooldown) - get_gametime() + NeoUsedTime[id] + 0.4 )
	else
		cooldown = -1
	return cooldown
}
#endif
//----------------------------------------------------------------------------------------------
public neor_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)

	// 2nd Argument is 0 or 1 depending on whether the id has the hero
	new id = str_to_num(temp)
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)

	switch(hasPowers)
	{
		case true:
			HasNeor[id] = true

		case false:
		{
			if (HasNeor[id] && UsingNeor[id]) {
				NumOfNeos -= 1
				if (NumOfNeos == 0) {
					BulletTime = false
					neor_stopbullettime()
				}
			}
			HasNeor[id] = false
		}
	}

	UsingNeor[id] = false
	NeorTimer[id] = -1
}
//----------------------------------------------------------------------------------------------
public new_spawn(id)
{
	if (FirstSpawn) {
		FirstSpawn = false
		NumOfNeos = 0
		BulletTime = false
		remove_bullets()
		neor_stopbullettime()
	}

	gPlayerUltimateUsed[id] = false
	UsingNeor[id] = false
	NeorTimer[id] = -1
}
//----------------------------------------------------------------------------------------------
public round_end()
{
	FirstSpawn = true
}
//----------------------------------------------------------------------------------------------
public remove_bullets()
{
	new ent = -1

	while ( (ent = engfunc(EngFunc_FindEntityByString, ent, "classname", "neoBullet")) > 0 ) {
		engfunc(EngFunc_RemoveEntity, ent)
	}

	ent = -1
	while ( (ent = engfunc(EngFunc_FindEntityByString, ent, "classname", "neoBulletPass")) > 0 ) {
		engfunc(EngFunc_RemoveEntity, ent)
	}

	ent = -1
	while ( (ent = engfunc(EngFunc_FindEntityByString, ent, "classname", "neoBulletStopped")) > 0 ) {
		engfunc(EngFunc_RemoveEntity, ent)
	}
}
//----------------------------------------------------------------------------------------------
public cur_weapon(id)
{
	new wpnid = read_data(2)
	new clip = read_data(3)

	if (BulletTime) {
		set_user_gravity(id, 0.5)

		if (LastWeap[id] != wpnid) {
			switch(HasNeor[id]) {
				case true: set_user_maxspeed(id, get_pcvar_float(CvarNeoSpeed))
				case false: set_user_maxspeed(id, get_pcvar_float(CvarNonNeoSpeed))
			}
		}
		else if ( LastClip[id] > clip ) {
			if (wpnid != CSW_C4 && wpnid != CSW_HEGRENADE && wpnid != CSW_FLASHBANG && wpnid != CSW_SMOKEGRENADE && wpnid != CSW_KNIFE) {
				create_bullet(id)
			}
		}
	}

	LastClip[id] = clip
	LastWeap[id] = wpnid
}
//----------------------------------------------------------------------------------------------
public create_bullet(id)
{
	new clipTemp, ammoTemp, wpnid = get_user_weapon(id, clipTemp, ammoTemp)
	new Float:viewOfs[3], Float:vOrigin[3], Float:vAngle[3]

	// Getting view origin this way is more exact then get_user_origin
	pev(id, pev_origin, vOrigin)
	pev(id, pev_view_ofs, viewOfs)

	// Even though only the z axis is affected, its just good habit to do them all
	vOrigin[0] += viewOfs[0]
	vOrigin[1] += viewOfs[1]
	vOrigin[2] += viewOfs[2]

	pev(id, pev_v_angle, vAngle)

	// Create Origin for bullets n units from view
	// Thanks to PM on which this piece of code is based, should just seperate this out in it's own function like PM had.
	vOrigin[0] += ( floatcos(vAngle[1], degrees) * floatcos(vAngle[0], degrees) ) * 26.0
	vOrigin[1] += ( floatsin(vAngle[1], degrees) * floatcos(vAngle[0], degrees) ) * 26.0
	vOrigin[2] += ( floatsin(vAngle[0], degrees) * -1.0 ) * 26.0

	// Invert the view angle's pitch(up/down) to set bullet angle correctly, only after the view angle has been used
	vAngle[0] *= -1.0

	// Ok lets make the damn ent now
	new NewEnt = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
	set_pev(NewEnt, pev_classname, "neoBullet")

	set_pev(NewEnt, pev_flags, wpnid)
	engfunc(EngFunc_SetModel, NewEnt, "models/shell.mdl")

	new Float:VecMins[3] = {-1.0, -1.0, -1.0}
	new Float:VecMaxs[3] = {1.0, 1.0, 1.0}
	set_pev(NewEnt, pev_mins, VecMins)
	set_pev(NewEnt, pev_maxs, VecMaxs)

	engfunc(EngFunc_SetOrigin, NewEnt, vOrigin)
	set_pev(NewEnt, pev_angles, vAngle)

	set_pev(NewEnt, pev_solid, SOLID_BBOX)
	set_pev(NewEnt, pev_movetype, MOVETYPE_FLY)
	set_pev(NewEnt, pev_owner, id)

	new Float:fNewVelocity[3], rgb[3]
	switch(HasNeor[id]) {
		case true: {
			velocity_by_aim(id, get_pcvar_num(CvarNeoBulletSpeed), fNewVelocity)
			rgb = {0, 255, 0}
		}
		case false: {
			velocity_by_aim(id, get_pcvar_num(CvarNonNeoBulletSpeed), fNewVelocity)
			rgb = {200, 200, 70}
		}
	}

	set_pev(NewEnt, pev_velocity, fNewVelocity)

	//Trail behind bullets
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(22)
	write_short(NewEnt)
	write_short(SpriteTrail)
	write_byte(3)
	write_byte(1)
	write_byte(rgb[0])
	write_byte(rgb[1])
	write_byte(rgb[2])
	write_byte(120)
	message_end()
}
//----------------------------------------------------------------------------------------------
public neor_touch(pToucher, pTouched)
{
	if (pToucher <= 0) return
	new BulletID = pToucher

	if (!pev_valid(BulletID)) return

	new szClassName[32]
	pev(BulletID, pev_classname, szClassName, 31)

	if (!equal(szClassName, "neoBullet") && !equal(szClassName, "neoBulletPass")) return

	new owner = pev(BulletID, pev_owner)

	if (pTouched == owner) return

	new rOrigin[3], kOrigin[3]
	new dmgtodo, wpnname[32], Float:vector[3]
	new wpnid = pev(BulletID, pev_flags)

	pev(BulletID, pev_origin, vector)
	rOrigin[0] = floatround(vector[0])
	rOrigin[1] = floatround(vector[1])
	rOrigin[2] = floatround(vector[2])

	engfunc(EngFunc_RemoveEntity, BulletID)

	if (!is_user_connected(pTouched) || get_user_godmode(pTouched)) return

	if (get_user_team(owner) == get_user_team(pTouched) && !get_cvar_num("mp_friendlyfire")) return

	switch (wpnid) {
		case CSW_P228		: dmgtodo = 15
		case CSW_SCOUT		: dmgtodo = 35
		case CSW_HEGRENADE	: dmgtodo = 15
		case CSW_XM1014		: dmgtodo = 15
		case CSW_MAC10		: dmgtodo = 15
		case CSW_AUG		: dmgtodo = 15
		case CSW_SMOKEGRENADE	: dmgtodo = 15
		case CSW_ELITE		: dmgtodo = 15
		case CSW_FIVESEVEN	: dmgtodo = 15
		case CSW_UMP45		: dmgtodo = 15
		case CSW_SG550		: dmgtodo = 15
		case CSW_GALI		: dmgtodo = 15
		case CSW_FAMAS		: dmgtodo = 15
		case CSW_USP		: dmgtodo = 15
		case CSW_GLOCK18	: dmgtodo = 15
		case CSW_AWP		: dmgtodo = 50
		case CSW_MP5NAVY	: dmgtodo = 15
		case CSW_M249		: dmgtodo = 15
		case CSW_M3		: dmgtodo = 15
		case CSW_M4A1		: dmgtodo = 15
		case CSW_TMP		: dmgtodo = 15
		case CSW_G3SG1		: dmgtodo = 15
		case CSW_FLASHBANG	: dmgtodo = 15
		case CSW_DEAGLE		: dmgtodo = 15
		case CSW_SG552		: dmgtodo = 15
		case CSW_AK47		: dmgtodo = 15
		case CSW_P90		: dmgtodo = 15
	}

	get_user_origin(owner, kOrigin)

	get_weaponname(wpnid, wpnname, 31)
	replace(wpnname, 31, "weapon_", "")

	// Make sure the victim is still alive to prevent crashes
	if (!is_user_alive(pTouched)) return

	// Add a random amount of damage to deal
	new rand_dmg = random_num(1, 30)
	dmgtodo += rand_dmg

	//Blood Spray
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(103)
	write_coord(rOrigin[0])
	write_coord(rOrigin[1])
	write_coord(rOrigin[2])
	write_coord(kOrigin[0])
	write_coord(kOrigin[1])
	write_coord(kOrigin[2])
	write_byte(70)
	write_byte(50)
	message_end()

	//Let superhero core deal the damage
	shExtraDamage(pTouched, owner, dmgtodo, wpnname)
}
//----------------------------------------------------------------------------------------------
public neor_kd()
{
	if (!hasRoundStarted()) return

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if (!is_user_alive(id)) return

	if (gPlayerUltimateUsed[id] || NeorTimer[id] > 0 || UsingNeor[id]) {
		playSoundDenySelect(id)
		return
	}

	set_hudmessage(20, 255, 20, -1.0, 0.25, 0, 1.0, 1.2, 0.4, 0.4)
	ShowSyncHudMsg(id, NeorHudSync, "Entering Bullet Time - Slow Motion")

	UsingNeor[id] = true
	set_task(0.1, "stop_neor_bullets", id, "", 0, "b")
	neor_glow(id)

	shGiveWeapon(id, "weapon_elite", true)

	if (!BulletTime) {
		BulletTime = true
		set_task(1.0, "neor_loop", TASKID, "", 0, "b")

		new sndplayers[SH_MAXSLOTS], sndnum
		get_players(sndplayers, sndnum, "ac")
		for (new x = 0; x < sndnum; x++) {
			emit_sound(sndplayers[x], CHAN_AUTO, "shmod/neor_btstart.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
		}
	}

	NumOfNeos += 1

	NeorTimer[id] = get_pcvar_num(CvarSlowMoTime)

	new Float:neoCooldown = get_pcvar_float(CvarCooldown)
	if ( neoCooldown > 0.0 )
		ultimateTimer(id, neoCooldown)

		#if SEND_COOLDOWN
		NeoUsedTime[id] = get_gametime()
		#endif
}
//----------------------------------------------------------------------------------------------
public neor_death()
{
	new id = read_data(2)

	if (HasNeor[id] && UsingNeor[id]) {
		NumOfNeos -= 1
		if (NumOfNeos == 0) {
			BulletTime = false
			neor_stopbullettime()
		}
	}

	gPlayerUltimateUsed[id] = false
	NeorTimer[id]= -1
	UsingNeor[id] = false
}
//----------------------------------------------------------------------------------------------
public neor_glow(id)
{
	if (!is_user_alive(id)) return
	set_user_rendering(id, kRenderFxGlowShell, 0, 80, 0)
}
//----------------------------------------------------------------------------------------------
public neor_glow2(id)
{
	if (!is_user_alive(id)) return
	set_user_rendering(id, kRenderFxGlowShell, 50, 205, 50)
}
//----------------------------------------------------------------------------------------------
public neor_unglow(id)
{
	if (!is_user_alive(id)) return
	set_user_rendering(id)
}
//----------------------------------------------------------------------------------------------
public neor_loop()
{
	if (!BulletTime) return

	new players[SH_MAXSLOTS], player_num, id
	new Float:neoSpeed = get_pcvar_float(CvarNeoSpeed)
	new Float:nonNeoSpeed = get_pcvar_float(CvarNonNeoSpeed)

	get_players(players, player_num, "a")

	for (new i = 0; i < player_num; i++) {
		id = players[i]

		if (!BulletTime) return

		set_user_hitzones(id, 0, 0)
		set_user_gravity(id, 0.5)

		switch(HasNeor[id]) {
			case true: set_user_maxspeed(id, neoSpeed)
			case false: set_user_maxspeed(id, nonNeoSpeed)
		}

		if (!UsingNeor[id]) {
			// Ok to over lap since it's only one message
			set_hudmessage(20, 255, 20, -1.0, 0.25, 0, 1.0, 1.2, 0.4, 0.4, -1)
			show_hudmessage(id, "Bullet Time - Slow Motion")
		}

		if (HasNeor[id] && UsingNeor[id]) {
			if (NeorTimer[id] > 0) {
				set_hudmessage(20, 255, 20, -1.0, 0.25, 0, 1.0, 1.2, 0.4, 0.4) 
				ShowSyncHudMsg(id, NeorHudSync, "%s - %d second%s left of Bullet Stopping", HeroName, NeorTimer[id], NeorTimer[id] == 1 ? "" : "s")
				NeorTimer[id]--
				neor_glow(id)
				set_task(0.2, "neor_unglow", id)
				set_task(0.4, "neor_glow2", id)
				set_task(0.6, "neor_unglow", id)
				set_task(0.7, "neor_glow", id)
			}
			else if (NeorTimer[id] == 0) {
				set_hudmessage(255, 10, 10, -1.0, 0.25, 0, 1.0, 3.0, 0.4, 0.4)
				ShowSyncHudMsg(id, NeorHudSync, "You lost your power to stop bullets")
				neor_unglow(id)
				NeorTimer[id] = -1
				UsingNeor[id] = false
				NumOfNeos -= 1
				if (NumOfNeos == 0) {
					new sndplayers[SH_MAXSLOTS], sndnum
					get_players(sndplayers, sndnum, "ac")
					for (new x = 0; x < sndnum; x++) {
						emit_sound(sndplayers[x], CHAN_AUTO, "shmod/neor_btend.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
					}
					BulletTime = false
					neor_stopbullettime()
				}
			}
		}
	}
}
//----------------------------------------------------------------------------------------------
public stop_neor_bullets(id)
{
	if (NeorTimer[id] <= 0) {
		neor_unglow(id)
		fall_neor_sbullets(id)
		remove_task(id)
		return
	}

	new owner, ent = -1
	new Float:origin[3]
	new Float:origin2[3]
	new Float:stop[3] = {0.0, 0.0, 0.0}

	pev(id, pev_origin, origin2)

	while ( (ent = engfunc(EngFunc_FindEntityByString, ent, "classname", "neoBullet")) > 0 ) {
		owner = pev(ent, pev_owner)
		if (owner == id) continue
		pev(ent, pev_origin, origin)
		if (vector_distance(origin, origin2) <= get_pcvar_float(CvarRadius)) {
			if (random_num(1, 100) <= get_pcvar_num(CvarDodgePct)) {
				set_pev(ent, pev_velocity, stop)
				set_pev(ent, pev_classname, "neoBulletStopped")
				set_pev(ent, pev_owner, id)
				set_pev(ent, pev_solid, SOLID_NOT)
			}
			else {
				set_pev(ent, pev_classname, "neoBulletPass")
			}
		}
	}
}
//----------------------------------------------------------------------------------------------
public fall_neor_sbullets(id)
{
	new owner, ent = -1
	while ( (ent = engfunc(EngFunc_FindEntityByString, ent, "classname", "neoBulletStopped")) > 0 ) {
		owner = pev(ent, pev_owner)
		if (owner == id) {
			set_pev(ent, pev_movetype, MOVETYPE_TOSS)
		}
	}
	set_task(1.0, "remove_sbullets", id)
}
//----------------------------------------------------------------------------------------------
public remove_sbullets(id)
{
	new owner, ent = -1
	while ( (ent = engfunc(EngFunc_FindEntityByString, ent, "classname", "neoBulletStopped")) > 0 ) {
		owner = pev(ent, pev_owner)

		if (owner == id) engfunc(EngFunc_RemoveEntity, ent)
	}
}
//----------------------------------------------------------------------------------------------
public neor_stopbullettime()
{
	remove_task(TASKID)

	NumOfNeos = 0
	BulletTime = false

	for (new id = 1; id <= SH_MAXSLOTS; id++) {
		UsingNeor[id] = false
		NeorTimer[id] = -1

		if (is_user_connected(id)) {
			set_user_hitzones(id, 0, 255)

			if (is_user_alive(id)) {
				neor_unglow(id)
				shResetSpeed(id)
				shRemGravityPower(id)
			}
		}
	}
}
//----------------------------------------------------------------------------------------------